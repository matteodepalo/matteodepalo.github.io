<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matteo Depalo's Blog]]></title>
  <link href="http://matteodepalo.github.io/atom.xml" rel="self"/>
  <link href="http://matteodepalo.github.io/"/>
  <updated>2014-01-03T19:50:39+01:00</updated>
  <id>http://matteodepalo.github.io/</id>
  <author>
    <name><![CDATA[Matteo Depalo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ember Integration Testing With Konacha]]></title>
    <link href="http://matteodepalo.github.io/blog/2014/01/03/ember-integration-testing-with-konacha/"/>
    <updated>2014-01-03T17:00:36+01:00</updated>
    <id>http://matteodepalo.github.io/blog/2014/01/03/ember-integration-testing-with-konacha</id>
    <content type="html"><![CDATA[<p>Ember is truly an awesome framework. The exciting community and the quality of the code has brought joy to front-end development.
That said, testing (more importantly integration testing) is a part of the framework that isn&rsquo;t quite there yet, and for various reasons:</p>

<ul>
<li>Lack of well defined best practices</li>
<li>Few complete examples</li>
<li>Debugging issues during tests is hard</li>
</ul>


<h2>Problems</h2>

<p>The <a href="http://emberjs.com/guides/testing/integration/">guide</a> on the Ember website is a good start but it&rsquo;s not enough. It won&rsquo;t tell you anything about how to handle the run loop during tests, how to work with timers or how to configure the store.
If you look around for examples they are either outdated or don&rsquo;t work with the framework you are using (Mocha, QUnit).</p>

<h2>Towards a viable stack</h2>

<p>After spending some time trying and failing I believe I&rsquo;ve reached a stack that makes me happy and that I consider solid enough:</p>

<ul>
<li>Rails (asset pipeline)</li>
<li>Konacha (Chai and Mocha)</li>
<li>Sinon</li>
</ul>


<p>Rails might seem an overkill for just the asset pipeline, but currently it&rsquo;s the most convenient way to build Ember applications. I&rsquo;ve tried <a href="https://github.com/stefanpenner/ember-app-kit">ember-app-kit</a> and although it&rsquo;s going in the right direction with the ES6 module system-aware resolver, it still has some rough edges like slow compilation times and a vast API surface.</p>

<p>Once you go with Rails you can draw from a nice pool of libraries built around it. <a href="https://github.com/jfirebaugh/konacha">Konacha</a> is one of them.
If you too think that testing like this is cool, keep reading:</p>

<iframe width="771" height="434" src="http://matteodepalo.github.io//www.youtube.com/embed/heK78M6Ql9Q" frameborder="0" allowfullscreen></iframe>


<p>Konacha uses <a href="http://visionmedia.github.io/mocha/">Mocha</a> and <a href="http://chaijs.com/">Chai</a> in combo. These libraries will make if you feel at home if you&rsquo;re coming from the RSpec world.
It also spins up a web server on the port 3500 that you can visit to run your tests (don&rsquo;t worry there is still a command for your CI).</p>

<p>The main problem is that Konacha uses Mocha to run tests and Ember supports only QUnit for integration testing out of the box; however teddyzeenny built an <a href="https://github.com/teddyzeenny/ember-mocha-adapter">adapter</a> for this purpose. Include it in the spec_helper file like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1">#= require sinon</span>
</span><span class='line'><span class="c1">#= require application</span>
</span><span class='line'><span class="c1">#= require ember-mocha-adapter</span>
</span><span class='line'>
</span><span class='line'><span class="nv">Ember.Test.adapter = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">Test</span><span class="p">.</span><span class="nx">MochaAdapter</span><span class="p">.</span><span class="nx">create</span><span class="p">()</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">setupForTesting</span><span class="p">()</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">injectTestHelpers</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you can use Ember test helpers like <code>visit</code> or <code>click</code> without worrying about asynchronous behavior. Just chain them or call <code>then</code> if you want to execute some code after asynchronous actions have been performed.
For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">describe</span> <span class="s">&#39;Notices - Integration&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nx">beforeEach</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">visit</span><span class="p">(</span><span class="s">&#39;/&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span> <span class="s">&#39;adds a Notice to the list&#39;</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">fillIn</span><span class="p">(</span><span class="s">&#39;input[type=&quot;text&quot;]&#39;</span><span class="p">,</span> <span class="s">&#39;test&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">click</span><span class="p">(</span><span class="s">&#39;input[type=&quot;submit&quot;]&#39;</span><span class="p">).</span><span class="nx">then</span> <span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">find</span><span class="p">(</span><span class="s">&#39;.title&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">().</span><span class="nx">should</span><span class="p">.</span><span class="nx">equal</span><span class="p">(</span><span class="s">&#39;test&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are some other important things to add to the spec_helper file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">mocha</span><span class="p">.</span><span class="nx">globals</span><span class="p">([</span><span class="s">&#39;Ember&#39;</span><span class="p">,</span> <span class="s">&#39;DS&#39;</span><span class="p">,</span> <span class="s">&#39;App&#39;</span><span class="p">,</span> <span class="s">&#39;MD5&#39;</span><span class="p">])</span>
</span><span class='line'><span class="nx">mocha</span><span class="p">.</span><span class="nx">timeout</span><span class="p">(</span><span class="mi">500</span><span class="p">)</span>
</span><span class='line'><span class="nv">chai.Assertion.includeStack = </span><span class="kc">true</span>
</span><span class='line'><span class="nv">Konacha.reset = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">K</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$.fx.off = </span><span class="kc">true</span>
</span><span class='line'>
</span><span class='line'><span class="nx">afterEach</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nx">App</span><span class="p">.</span><span class="nx">reset</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">setup</span><span class="p">()</span>
</span><span class='line'><span class="nx">App</span><span class="p">.</span><span class="nx">advanceReadiness</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first 4 lines will make Konacha play nicely with Ember. They will tell it to ignore leaks on globals and to avoid clearing the body of the application after each test, which is something that Ember doesn&rsquo;t like.</p>

<p>Removing animations is always a good idea during testing, it will improve speed and cause less accidental problems.</p>

<p>We also tell Mocha to reset the App after each test, which will destroy and reload everything bringing the router to its initial  status.</p>

<p>The last lines are important if you have to setup your application before loading it. When you visit localhost:3500 Konacha will load the page and Ember will run App initializers and advance App readiness on document ready. In order to have full control over this process remember to add <code>App.deferReadiness()</code> at the end of the application.coffee file, after creating the App.</p>

<p>If you need to perform some setup before resetting (<code>setup</code> is a custom method I&rsquo;ve added), override the reset method like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nv">YourApplication = </span><span class="nx">Ember</span><span class="p">.</span><span class="nx">Application</span><span class="p">.</span><span class="nx">extend</span>
</span><span class='line'>  <span class="nv">setup: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="c1"># some setup code</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">reset: </span><span class="nf">-&gt;</span>
</span><span class='line'>    <span class="nx">@setup</span><span class="p">()</span>
</span><span class='line'>    <span class="nx">@_super</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Under the hood</h2>

<p>There are some things that this spec_helper will do under the hood. First of all it will set <code>Ember.testing</code> to <code>true</code>. This will stop the auto-run feature of the Ember RunLoop during tests to give you control over what can run with async side effects and what cannot.</p>

<p>For example if you want to create a fixture you need to wrap it in a <code>Ember.run</code> block or it won&rsquo;t execute all the async operation that will be scheduled by the application model adapter, like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">run</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="nv">notice = </span><span class="nx">App</span><span class="p">.</span><span class="nx">__container__</span><span class="p">.</span><span class="nx">lookup</span><span class="p">(</span><span class="s">&#39;store:main&#39;</span><span class="p">).</span><span class="nx">createRecord</span><span class="p">(</span><span class="s">&#39;notice&#39;</span><span class="p">,</span> <span class="p">{</span> <span class="nv">title: </span><span class="s">&#39;test&#39;</span> <span class="p">})</span>
</span><span class='line'>  <span class="nx">notice</span><span class="p">.</span><span class="nx">save</span><span class="p">().</span><span class="nx">then</span> <span class="nf">-&gt;</span>
</span><span class='line'>    <span class="c1"># check something</span>
</span></code></pre></td></tr></table></div></figure>


<p>I strongly suggest to read about how the Ember loop works  because sooner or later you will need that knowledge in order to debug tests. There is a good SO <a href="http://stackoverflow.com/questions/13597869/what-is-ember-runloop-and-how-does-it-work">answer</a> about it.</p>

<p>The <code>Ember.Test.MochaAdapter</code> will also enable the <a href="http://visionmedia.github.io/mocha/#interfaces">bdd</a> interface for you, so you can use stuff like <code>describe</code> and <code>it</code> during tests.</p>

<h2>Stubbing the server</h2>

<p>In order to test interactions with a web server some people suggest to switch to FixtureAdapters during tests, but I don&rsquo;t like this approach because you wouldn&rsquo;t be testing the actual code of your application and some features, like associations, are implemented properly only on RESTAdapters.
What I&rsquo;ve found useful instead is mocking the xhr object itself with the sinon.fakeServer. Suppose you want to stub the <code>/api/notices</code> endpoint, which should return a list of <code>notices</code>, you can do it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nv">server = </span><span class="nx">sinon</span><span class="p">.</span><span class="nx">fakeServer</span><span class="p">.</span><span class="nx">create</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="nv">server.autoRespond = </span><span class="kc">true</span>
</span><span class='line'>
</span><span class='line'><span class="nx">server</span><span class="p">.</span><span class="nx">respondWith</span><span class="p">(</span><span class="s">&#39;GET&#39;</span><span class="p">,</span> <span class="s">&#39;/api/notices&#39;</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>  <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>  <span class="p">{</span> <span class="s">&#39;Content-Type&#39;</span><span class="o">:</span> <span class="s">&#39;application/json&#39;</span> <span class="p">},</span>
</span><span class='line'>  <span class="s">&#39;{ &quot;notices&quot;: [</span>
</span><span class='line'><span class="s">    {</span>
</span><span class='line'><span class="s">      &quot;id&quot;: &quot;a5babb5f-e5b2-4ccf-85fc-4893f8d08d1f&quot;,</span>
</span><span class='line'><span class="s">      &quot;title&quot;: &quot;test&quot;,</span>
</span><span class='line'><span class="s">      &quot;created_at&quot;: &quot;2014-01-02T14:01:02.810Z&quot;</span>
</span><span class='line'><span class="s">    }</span>
</span><span class='line'><span class="s">  ]}&#39;</span>
</span><span class='line'><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way you won&rsquo;t need to change your adapter at runtime and tests will run superfast.</p>

<h2>Gotchas</h2>

<p>Beware of timers. If your application has long running or self scheduling timers, every function that uses <code>wait</code> under the hood, like <code>visit</code>, will never resolve. It has been discussed that you should be able to explicitly avoid waiting for specific timers during tests, but in the meanwhile you can use the following hack:</p>

<p>Before:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">run</span><span class="p">.</span><span class="nx">later</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="c1"># execute something</span>
</span><span class='line'><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>After:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">setTimeout</span><span class="p">(</span><span class="o">=&gt;</span>
</span><span class='line'>  <span class="nx">Ember</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="o">=&gt;</span>
</span><span class='line'>    <span class="c1"># execute something</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This way you won&rsquo;t use the Ember internal setTimeout (which is not optimal), but you won&rsquo;t risk of executing async code outside of the run loop while allowing your tests to pass.</p>

<h2>Conclusion</h2>

<p>Ember is still a relatively young framework which means that you will have to work more to get simple stuff done. However I believe the community is very conscious of this and it&rsquo;s pushing towards a common and strong approach for getting started quickly and testing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails API Documentation]]></title>
    <link href="http://matteodepalo.github.io/blog/2013/07/24/rails-api-documentation/"/>
    <updated>2013-07-24T12:46:00+02:00</updated>
    <id>http://matteodepalo.github.io/blog/2013/07/24/rails-api-documentation</id>
    <content type="html"><![CDATA[<p>Lately I&rsquo;ve been working on a new project for mobile called Playround. My job is to design and implement the API. I must say that with the help of Rails 4 and Rails API the experience has been the smoothest possible. With requests and models specs I can test the whole application at blazing speeds.
At a certain point however I faced an issue: documentation.</p>

<p>Especially in the first stages of development, working inside a team mandates transparency about the current status of the API so the mobile developers know exactly what to expect from the server while testing locally.
Of course documenting is exceptionally useful also for the mature stage of the project when we will have to publish the API documentation in a beautiful layout. In order to achieve documentation nirvana I started experimenting various ways of building it, possibly in a way that would output something I can use for our public doc.</p>

<p>At first I started putting &ldquo;debugger&rdquo; in every test and printing the output of the response, however this task got tedious pretty fast. Looking around I found a <a href="https://github.com/zipmark/rspec_api_documentation">gem</a> that compiles a documentation, however it forced me to use a specific dsl which means I had to rewrite my tests. When I started I used the convention adopted by the first requests tests you find with scaffolds and I wanted to keep that.</p>

<p>In order to achieve this I wrote a simple script in the spec helper that does the following things:</p>

<ul>
<li>For every request spec file it creates a corresponding txt file inside the doc folder.</li>
<li>For each test the path, status, request and response are written inside the corresponding file.</li>
</ul>


<p>Request tests have to follow a convention:</p>

<ul>
<li>Top level descriptions are named after the model (plural form) followed by the word &ldquo;Requests&rdquo;. For the model Arena it would be &ldquo;Arenas Requests&rdquo;.</li>
<li>Actions are in the form of &ldquo;VERB path&rdquo;. For the show action of the Arenas controller it would be &ldquo;GET /arenas/:id&rdquo;.</li>
</ul>


<p>The code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">after</span><span class="p">(</span><span class="ss">:each</span><span class="p">,</span> <span class="ss">type</span><span class="p">:</span> <span class="ss">:request</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">response</span>
</span><span class='line'>    <span class="n">example_group</span> <span class="o">=</span> <span class="n">example</span><span class="o">.</span><span class="n">metadata</span><span class="o">[</span><span class="ss">:example_group</span><span class="o">]</span>
</span><span class='line'>    <span class="n">example_groups</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="n">example_group</span>
</span><span class='line'>      <span class="n">example_groups</span> <span class="o">&lt;&lt;</span> <span class="n">example_group</span>
</span><span class='line'>      <span class="n">example_group</span> <span class="o">=</span> <span class="n">example_group</span><span class="o">[</span><span class="ss">:example_group</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">action</span> <span class="o">=</span> <span class="n">example_groups</span><span class="o">[-</span><span class="mi">2</span><span class="o">][</span><span class="ss">:description_args</span><span class="o">].</span><span class="n">first</span> <span class="k">if</span> <span class="n">example_groups</span><span class="o">[-</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>    <span class="n">example_groups</span><span class="o">[-</span><span class="mi">1</span><span class="o">][</span><span class="ss">:description_args</span><span class="o">].</span><span class="n">first</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="sr">/(\w+)\sRequests/</span><span class="p">)</span>
</span><span class='line'>    <span class="n">file_name</span> <span class="o">=</span> <span class="vg">$1</span><span class="o">.</span><span class="n">underscore</span>
</span><span class='line'>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="p">,</span> <span class="s2">&quot;/docs/</span><span class="si">#{</span><span class="n">file_name</span><span class="si">}</span><span class="s2">.txt&quot;</span><span class="p">),</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span>
</span><span class='line'>      <span class="n">f</span><span class="o">.</span><span class="n">write</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">action</span><span class="si">}</span><span class="s2"> </span><span class="se">\n\n</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">request_body</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">read</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">request</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s1">&#39;Authorization&#39;</span><span class="o">]</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="n">write</span> <span class="s2">&quot;Headers: </span><span class="se">\n\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="n">write</span> <span class="s2">&quot;Authorization: </span><span class="si">#{</span><span class="n">request</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s1">&#39;Authorization&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2"> </span><span class="se">\n\n</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">request_body</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="n">write</span> <span class="s2">&quot;Request body: </span><span class="se">\n\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="n">write</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">JSON</span><span class="o">.</span><span class="n">pretty_generate</span><span class="p">(</span><span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">request_body</span><span class="p">))</span><span class="si">}</span><span class="s2"> </span><span class="se">\n\n</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">f</span><span class="o">.</span><span class="n">write</span> <span class="s2">&quot;Status: </span><span class="si">#{</span><span class="n">response</span><span class="o">.</span><span class="n">status</span><span class="si">}</span><span class="s2"> </span><span class="se">\n\n</span><span class="s2">&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="n">write</span> <span class="s2">&quot;Response body: </span><span class="se">\n\n</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="n">f</span><span class="o">.</span><span class="n">write</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">JSON</span><span class="o">.</span><span class="n">pretty_generate</span><span class="p">(</span><span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="p">))</span><span class="si">}</span><span class="s2"> </span><span class="se">\n\n</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span> <span class="k">unless</span> <span class="n">response</span><span class="o">.</span><span class="n">status</span> <span class="o">==</span> <span class="mi">401</span> <span class="o">||</span> <span class="n">response</span><span class="o">.</span><span class="n">status</span> <span class="o">==</span> <span class="mi">403</span> <span class="o">||</span> <span class="n">response</span><span class="o">.</span><span class="n">status</span> <span class="o">==</span> <span class="mi">301</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Example output for &ldquo;Rounds Requests&rdquo; POST action:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">POST</span> <span class="sr">/v1/</span><span class="n">rounds</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Headers</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Authorization</span><span class="p">:</span> <span class="no">Token</span> <span class="n">token</span><span class="o">=</span><span class="s2">&quot;36260243e091bfe56f96483592afc723&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">Request</span> <span class="ss">body</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;round&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;game_name&quot;</span><span class="p">:</span> <span class="s2">&quot;dota2&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;arena&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;foursquare_id&quot;</span><span class="p">:</span> <span class="s2">&quot;5104&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Status</span><span class="p">:</span> <span class="mi">201</span>
</span><span class='line'>
</span><span class='line'><span class="no">Response</span> <span class="ss">body</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;round&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;ec6add8b-709f-475d-8f06-8ad44d8a95d3&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;state&quot;</span><span class="p">:</span> <span class="s2">&quot;waiting_for_players&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;created_at&quot;</span><span class="p">:</span> <span class="s2">&quot;2013-07-24T12:16:14.700Z&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;game&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;1c59b30e-599a-4ea1-9d5c-a364079528ad&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;dota2&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;display_name&quot;</span><span class="p">:</span> <span class="s2">&quot;Dota 2&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;picture_url&quot;</span><span class="p">:</span> <span class="s2">&quot;http://localhost:8080/assets/dota2.jpg&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;teams&quot;</span><span class="p">:</span> <span class="o">[</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;radiant&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;display_name&quot;</span><span class="p">:</span> <span class="s2">&quot;Radiant&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;number_of_players&quot;</span><span class="p">:</span> <span class="mi">5</span>
</span><span class='line'>        <span class="p">},</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;dire&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;display_name&quot;</span><span class="p">:</span> <span class="s2">&quot;Dire&quot;</span><span class="p">,</span>
</span><span class='line'>          <span class="s2">&quot;number_of_players&quot;</span><span class="p">:</span> <span class="mi">5</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="o">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;arena&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;5c593125-a114-4a1a-936f-2cc4b21fa0a8&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Clinton St. Baking Co. &amp; Restaurant&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;latitude&quot;</span><span class="p">:</span> <span class="mi">40</span><span class="o">.</span><span class="mi">721294</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;longitude&quot;</span><span class="p">:</span> <span class="o">-</span><span class="mi">73</span><span class="o">.</span><span class="mi">983994</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;foursquare_id&quot;</span><span class="p">:</span> <span class="s2">&quot;5104&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;teams&quot;</span><span class="p">:</span> <span class="o">[</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;id&quot;</span><span class="p">:</span> <span class="s2">&quot;87fb0fe4-2f0c-400d-ba00-000c3f5ea642&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;Test User&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;picture_url&quot;</span><span class="p">:</span> <span class="s2">&quot;http://graph.facebook.com/12132/picture?type=square&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;facebook_id&quot;</span><span class="p">:</span> <span class="s2">&quot;12132&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m excluding 401, 403 and 301 status codes because those cases are grouped and documented inside a common area in my documentation, but there is nothing special about them.</p>

<p>Now to the beautiful layout part. Right now I&rsquo;m copy pasting those response and requests bodies inside the templates of a <a href="https://github.com/playround/playround-developer">Jekyll application</a> hosted on <a href="http://developer.goplayround.com">Github Pages</a>. One way to automate this would be to use a templating language in order to output html documents instead of plain txt files. Since the production documentation should change way less frequently than the development one, this is a automation I can skip for now. It&rsquo;s far more important to keep a fresh copy of the features for internal usage, which can be rebuilt anytime by anyone with no effort.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Minimum Viable Stack]]></title>
    <link href="http://matteodepalo.github.io/blog/2013/04/08/minimum-viable-stack/"/>
    <updated>2013-04-08T14:55:00+02:00</updated>
    <id>http://matteodepalo.github.io/blog/2013/04/08/minimum-viable-stack</id>
    <content type="html"><![CDATA[<p>After <a href="http://matteodepalo.github.io/blog/2013/03/07/how-i-migrated-from-heroku-to-digital-ocean-with-chef-and-capistrano/">migrating to my own VPS solution from Heroku</a> at <a href="https://goresponsa.com">Responsa</a>, I&rsquo;ve traveled across the internet land in order to select and build a solid production stack.
Now that I think I&rsquo;ve reached it I want to share my choices in case anyone has to go through the same process.</p>

<h2>Service selection criterion</h2>

<p>I&rsquo;m using Chef as provisioning tool so while looking around for services I immediately run the query on Google: &ldquo;#{service} cookbook&rdquo;. Usually there is always a cookbook, but most of them are really bad. However if the cookbook is good the chances of that service to be picked are very high.</p>

<h2>Grocery list</h2>

<p>The list of things I need boils down to this:</p>

<ul>
<li>DB and cache</li>
<li>Ruby</li>
<li>Monitoring service for CPU, memory, IO etc…</li>
<li>Service manager</li>
<li>Logs aggregator</li>
<li>Backups manager</li>
<li>Web server</li>
</ul>


<h3>DB</h3>

<p><a href="https://www.mongohq.com/home">MongoHQ</a> has a very good service with awesome customer support. Can&rsquo;t recommend them enough.</p>

<p>For session and cache storage I chose <a href="https://github.com/FunGoStudios/redis-cookbook">Redis</a> and <a href="http://community.opscode.com/cookbooks/memcached">Memcached</a> respectively.</p>

<p>I&rsquo;ve yet to find a good cookbook for Redis 2.6. I guess I&rsquo;ll have to upgrade the cookbook myself when I have the chance.</p>

<h3>Ruby</h3>

<p><a href="https://github.com/fnichol/chef-rbenv">rbenv</a> and <a href="https://github.com/fnichol/chef-ruby_build">ruby_build</a> are the killer combo. Just install your Ruby version as global. After all who needs multiple versions of ruby on the production machine?</p>

<h3>Services manager</h3>

<p>I&rsquo;m not really opinionated about service managers so this was the most community driven choice. Many are using Runit and the <a href="http://community.opscode.com/cookbooks/runit">cookbook</a> is pretty good.</p>

<h3>Monitoring</h3>

<p>I&rsquo;ve tried Munin but it felt like using a walkman in 2013.
Hard to configure with chef solo (no need for server and client in that case) and badly documented.</p>

<p>New Relic kicks ass. The <a href="http://community.opscode.com/cookbooks/newrelic">cookbook</a> is one include_recipe away from running and the dashboard is feature rich and easy to use. The downside is that if you have many instances the price might go out of bounds…</p>

<h3>Logs aggregator</h3>

<p>There are some nice competitors in this space. <a href="http://loggly.com/">Loggly</a>, <a href="https://logentries.com/">Logentries</a> and <a href="https://papertrailapp.com/">Papertrail</a>. Again this was a decision driven by the quality of the cookbook and Papertrail has a <a href="https://github.com/responsa/papertrail-cookbook">pretty good one</a>.</p>

<p>I use rsyslog to put all my important logs in one place, Papertrail grabs them and cleverly separates services like Unicorn, sshd, Nginx etc…
The search feature is also useful.</p>

<h3>Backups</h3>

<p><a href="https://github.com/javan/whenever">Whenever</a> + <a href="https://github.com/meskyanichi/backup">Backup</a> are the killer combo. I&rsquo;ve set them up with a custom made cookbook that updates the crontab with whenever at every chef run.</p>

<h3>Web server</h3>

<p><a href="http://community.opscode.com/cookbooks/nginx">Nginx</a>. Boom. Done.</p>

<h3>Bonus</h3>

<p>I don&rsquo;t like when I close my laptop and after reopening it ssh hangs. To solve that issue I use <a href="http://mosh.mit.edu/">mosh</a> which needs a server installed on the machine. Luckily there is a <a href="http://community.opscode.com/cookbooks/mosh">cookbook</a> also for that.</p>

<p>You&rsquo;re welcome to share your stack in the comments below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I Migrated From Heroku to Digital Ocean With Chef and Capistrano]]></title>
    <link href="http://matteodepalo.github.io/blog/2013/03/07/how-i-migrated-from-heroku-to-digital-ocean-with-chef-and-capistrano/"/>
    <updated>2013-03-07T11:24:00+01:00</updated>
    <id>http://matteodepalo.github.io/blog/2013/03/07/how-i-migrated-from-heroku-to-digital-ocean-with-chef-and-capistrano</id>
    <content type="html"><![CDATA[<p>UPDATE:</p>

<ul>
<li>Removed ElasticSearch and MongoDB recipes since they were not so useful for this tutorial.</li>
<li>Added unicorn.rb</li>
<li>Added ssh authentication step</li>
<li>Added file paths</li>
</ul>


<p>I&rsquo;ve always loved deploying to Heroku. The simplicity of a git push let me focus on developing my applications which is what I really care about. However, both because of the <a href="http://rapgenius.com/James-somers-herokus-ugly-secret-lyrics">scandal about the routing system</a> and because I wanted to expand my skill set by entering the sysadmin land, at <a href="https://goresponsa.com">Responsa</a> I decided to migrate to a VPS solution.</p>

<p>At this point I had three choices to make:</p>

<ol>
<li>Hosting provider</li>
<li>Technology stack</li>
<li>Deploy strategy</li>
</ol>


<h2>Provider</h2>

<p>Many hackers I follow were recommending <a href="https://www.digitalocean.com/">Digital Ocean</a> so I gave it a try. I must say I was very impressed with the simplicity and power of their dashboard, so I decided to use it.</p>

<p>I immediately changed my root password</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>passwd</span></code></pre></td></tr></table></div></figure>


<p>Copied over my ssh key with</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh-copy-id root@$IP</span></code></pre></td></tr></table></div></figure>


<p>And disabled password access setting <code>PasswordAuthentication no</code> in <code>/etc/ssh/sshd_config</code></p>

<h2>Technology</h2>

<p>The decision of the web server was also quick. I wanted to achieve 0 downtime deployments so Github use of <a href="https://github.com/blog/517-unicorn">Unicorn + Nginx</a> jumped to my mind.</p>

<h2>Deploy strategy</h2>

<p>This is where things got a little bit complicated. Disclaimer: I&rsquo;m not a Linux/Unix pro, so many system administration practices where unknown to me prior to this week. Having said that, It was clear to me that the community is very fragmented. There were so many solutions to the same problems and so many scripts! After digging, trying and failing miserably I settled on the stack that caused me the least suffering:</p>

<ol>
<li>Chef solo and Knife for the machine provisioning</li>
<li>Capistrano for the deployment</li>
</ol>


<h2>Chef</h2>

<p><a href="http://www.opscode.com/chef/">Chef</a> is a provisioning tool written in Ruby. Its DSL is very expressive and powerful. The community is full of useful cookbooks that ease the setup of common services, however it seemed to lack a way to handle community cookbooks. This is where <a href="https://github.com/applicationsonline/librarian-chef">Librarian Chef</a> comes in. I just had to write a Cheffile with all the dependencies and I was done.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Cheffile</span>
</span><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'><span class="c1">#^syntax detection</span>
</span><span class='line'>
</span><span class='line'><span class="n">site</span> <span class="s1">&#39;http://community.opscode.com/api/v1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cookbook</span> <span class="s1">&#39;libqt4&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s1">&#39;https://github.com/phlipper/chef-libqt4&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">cookbook</span> <span class="s1">&#39;nodejs&#39;</span>
</span><span class='line'><span class="n">cookbook</span> <span class="s1">&#39;nginx&#39;</span>
</span><span class='line'><span class="n">cookbook</span> <span class="s1">&#39;runit&#39;</span>
</span><span class='line'><span class="n">cookbook</span> <span class="s1">&#39;java&#39;</span>
</span><span class='line'><span class="n">cookbook</span> <span class="s1">&#39;imagemagick&#39;</span>
</span><span class='line'><span class="n">cookbook</span> <span class="s1">&#39;vim&#39;</span>
</span><span class='line'><span class="n">cookbook</span> <span class="s1">&#39;ruby_build&#39;</span><span class="p">,</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s1">&#39;git://github.com/fnichol/chef-ruby_build.git&#39;</span>
</span><span class='line'><span class="n">cookbook</span> <span class="s1">&#39;rbenv&#39;</span><span class="p">,</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s1">&#39;git://github.com/fnichol/chef-rbenv.git&#39;</span>
</span><span class='line'><span class="n">cookbook</span> <span class="s1">&#39;redis&#39;</span><span class="p">,</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s1">&#39;git://github.com/cassianoleal/chef-redis.git&#39;</span>
</span><span class='line'><span class="n">cookbook</span> <span class="s1">&#39;memcached&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>To bootstrap the machine with Chef and Ruby many people where using custom Knife templates that were not working for me. Some installed ruby with RVM, others with rbenv. In the end I found <a href="http://matschaffer.github.com/knife-solo/">Knife Solo</a> that solved all my problems. With one command after the initialization I could install Chef AND run all my recipes to install Ruby and every other service I needed.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">knife</span> <span class="n">solo</span> <span class="n">init</span>
</span><span class='line'><span class="n">knife</span> <span class="n">solo</span> <span class="n">bootstrap</span> <span class="n">root</span><span class="err">@</span><span class="vg">$IP</span> <span class="n">node</span><span class="o">.</span><span class="n">json</span>
</span></code></pre></td></tr></table></div></figure>


<p>Librarian and Knife Solo forced me to use a specific project structure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">mychefrepo</span><span class="o">/</span>
</span><span class='line'><span class="err">├──</span> <span class="n">cookbooks</span>
</span><span class='line'><span class="err">├──</span> <span class="n">site</span><span class="o">-</span><span class="n">cookbooks</span>
</span><span class='line'><span class="err">├──</span> <span class="no">Cheffile</span>
</span><span class='line'><span class="err">├──</span> <span class="no">Cheffile</span><span class="o">.</span><span class="n">lock</span>
</span><span class='line'><span class="err">└──</span> <span class="n">node</span><span class="o">.</span><span class="n">json</span>
</span></code></pre></td></tr></table></div></figure>


<p>The node.json contains the run list of recipes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;deployer&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;password&quot;</span><span class="p">:</span> <span class="err">$PASSWORD</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;environment&quot;</span><span class="p">:</span> <span class="s2">&quot;production&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;server_name&quot;</span><span class="p">:</span> <span class="s2">&quot;goresponsa.com&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;deploy_to&quot;</span><span class="p">:</span> <span class="s2">&quot;/var/www/responsa&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;ruby-version&quot;</span><span class="p">:</span> <span class="s2">&quot;1.9.3-p286&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;run_list&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;recipe[vim]&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;recipe[libqt4]&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;recipe[imagemagick]&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;recipe[java]&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;recipe[redis::source]&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;recipe[memcached]&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;recipe[nodejs]&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;recipe[ruby_build]&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;recipe[rbenv::system]&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;recipe[runit]&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;recipe[nginx]&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;recipe[main]&quot;</span>
</span><span class='line'>  <span class="p">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>All recipes except the &ldquo;main&rdquo; one are taken from community cookbooks.</p>

<p>The main recipe contains machine/application specific setup:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># chef/site-cookbooks/main/recipes/default.rb</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># setup</span>
</span><span class='line'>
</span><span class='line'><span class="n">rbenv_ruby</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;ruby-version&#39;</span><span class="o">]</span>
</span><span class='line'><span class="n">rbenv_global</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;ruby-version&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">rbenv_gem</span> <span class="s1">&#39;bundler&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="s1">&#39;admin&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gid</span> <span class="mi">420</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">user</span> <span class="n">node</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:name</span><span class="o">]</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">password</span> <span class="n">node</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:password</span><span class="o">]</span>
</span><span class='line'>  <span class="n">gid</span> <span class="s1">&#39;admin&#39;</span>
</span><span class='line'>  <span class="n">home</span> <span class="s2">&quot;/home/</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:name</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">shell</span> <span class="s1">&#39;/bin/bash&#39;</span>
</span><span class='line'>  <span class="n">supports</span> <span class="ss">:manage_home</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">directory</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="ss">:deploy_to</span><span class="o">]</span><span class="si">}</span><span class="s2">/tmp/sockets&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">owner</span> <span class="n">node</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:name</span><span class="o">]</span>
</span><span class='line'>  <span class="n">group</span> <span class="s1">&#39;admin&#39;</span>
</span><span class='line'>  <span class="n">recursive</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># certificates</span>
</span><span class='line'>
</span><span class='line'><span class="n">directory</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="ss">:deploy_to</span><span class="o">]</span><span class="si">}</span><span class="s2">/certificate&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">owner</span> <span class="n">node</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:name</span><span class="o">]</span>
</span><span class='line'>  <span class="n">recursive</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">cookbook_file</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="ss">:deploy_to</span><span class="o">]</span><span class="si">}</span><span class="s2">/certificate/</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="ss">:environment</span><span class="o">]</span><span class="si">}</span><span class="s2">.crt&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="ss">:environment</span><span class="o">]</span><span class="si">}</span><span class="s2">.crt&quot;</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:create_if_missing</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">cookbook_file</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="ss">:deploy_to</span><span class="o">]</span><span class="si">}</span><span class="s2">/certificate/</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="ss">:environment</span><span class="o">]</span><span class="si">}</span><span class="s2">.key&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="ss">:environment</span><span class="o">]</span><span class="si">}</span><span class="s2">.key&quot;</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:create_if_missing</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># configuration</span>
</span><span class='line'>
</span><span class='line'><span class="n">template</span> <span class="s1">&#39;/etc/nginx/sites-enabled/default&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s1">&#39;nginx.erb&#39;</span>
</span><span class='line'>  <span class="n">owner</span> <span class="s1">&#39;root&#39;</span>
</span><span class='line'>  <span class="n">group</span> <span class="s1">&#39;root&#39;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0644</span>
</span><span class='line'>  <span class="n">notifies</span> <span class="ss">:restart</span><span class="p">,</span> <span class="s1">&#39;service[nginx]&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">[</span><span class="s2">&quot;sv&quot;</span><span class="p">,</span> <span class="s2">&quot;service&quot;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">dir</span><span class="o">|</span>
</span><span class='line'>  <span class="n">directory</span> <span class="s2">&quot;/home/</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:name</span><span class="o">]</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">dir</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">owner</span> <span class="n">node</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:name</span><span class="o">]</span>
</span><span class='line'>    <span class="n">group</span> <span class="s1">&#39;admin&#39;</span>
</span><span class='line'>    <span class="n">recursive</span> <span class="kp">true</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">runit_service</span> <span class="s2">&quot;runsvdir-</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:name</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">default_logger</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">runit_service</span> <span class="s1">&#39;responsa&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">sv_dir</span> <span class="s2">&quot;/home/</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:name</span><span class="o">]</span><span class="si">}</span><span class="s2">/sv&quot;</span>
</span><span class='line'>  <span class="n">service_dir</span> <span class="s2">&quot;/home/</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:name</span><span class="o">]</span><span class="si">}</span><span class="s2">/service&quot;</span>
</span><span class='line'>  <span class="n">owner</span> <span class="n">node</span><span class="o">[</span><span class="ss">:user</span><span class="o">][</span><span class="ss">:name</span><span class="o">]</span>
</span><span class='line'>  <span class="n">group</span> <span class="s1">&#39;admin&#39;</span>
</span><span class='line'>  <span class="n">restart_command</span> <span class="s1">&#39;2&#39;</span>
</span><span class='line'>  <span class="n">restart_on_update</span> <span class="kp">false</span>
</span><span class='line'>  <span class="n">default_logger</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">service</span> <span class="s1">&#39;nginx&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m using runit to manage the unicorn service that is declared in a template file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># chef/site-cookbooks/main/templates/default/sv-runsvdir-deployer-run.erb</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#!/bin/sh</span>
</span><span class='line'><span class="nb">exec</span> <span class="mi">2</span><span class="o">&gt;&amp;</span><span class="mi">1</span>
</span><span class='line'><span class="nb">exec</span> <span class="n">chpst</span> <span class="o">-</span><span class="n">u</span> <span class="n">deployer</span> <span class="n">runsvdir</span> <span class="sr">/home/</span><span class="n">deployer</span><span class="o">/</span><span class="n">service</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># chef/site-cookbooks/main/templates/default/sv-responsa-run.erb</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#!/bin/bash</span>
</span><span class='line'><span class="nb">exec</span> <span class="mi">2</span><span class="o">&gt;&amp;</span><span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% unicorn_command </span><span class="o">=</span> <span class="vi">@options</span><span class="o">[</span><span class="ss">:unicorn_command</span><span class="o">]</span> <span class="o">||</span> <span class="s1">&#39;unicorn_rails&#39;</span> <span class="o">-</span><span class="sx">%&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">#</span>
</span><span class='line'><span class="sx"># Since unicorn creates a new pid on restart/reload, it needs a little extra love to</span>
</span><span class='line'><span class="sx"># manage with runit. Instead of managing unicorn directly, we simply trap signal calls</span>
</span><span class='line'><span class="sx"># to the service and redirect them to unicorn directly.</span>
</span><span class='line'>
</span><span class='line'><span class="sx">function is_unicorn_alive {</span>
</span><span class='line'><span class="sx">    set +e</span>
</span><span class='line'><span class="sx">    if [ -n $1 ] &amp;&amp; kill -0 $1 &gt;</span><span class="sr">/dev/nu</span><span class="n">ll</span> <span class="mi">2</span><span class="o">&gt;&amp;</span><span class="mi">1</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>        <span class="n">echo</span> <span class="s2">&quot;yes&quot;</span>
</span><span class='line'>    <span class="n">fi</span>
</span><span class='line'>    <span class="n">set</span> <span class="o">-</span><span class="n">e</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">echo</span> <span class="s2">&quot;Service PID: $$&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="no">CUR_PID_FILE</span><span class="o">=</span><span class="sr">/var/</span><span class="n">www</span><span class="o">/</span><span class="n">responsa</span><span class="o">/</span><span class="n">shared</span><span class="o">/</span><span class="n">pids</span><span class="o">/</span><span class="n">unicorn</span><span class="o">.</span><span class="n">pid</span>
</span><span class='line'><span class="no">OLD_PID_FILE</span><span class="o">=</span><span class="vg">$CUR_PID_FILE</span><span class="o">.</span><span class="n">oldbin</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="o">-</span><span class="n">e</span> <span class="vg">$OLD_PID_FILE</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="no">OLD_PID</span><span class="o">=</span><span class="err">$</span><span class="p">(</span><span class="n">cat</span> <span class="vg">$OLD_PID_FILE</span><span class="p">)</span>
</span><span class='line'>    <span class="n">echo</span> <span class="s2">&quot;Waiting for existing master ($OLD_PID) to exit&quot;</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">[</span> <span class="o">-</span><span class="n">n</span> <span class="s2">&quot;$(is_unicorn_alive $OLD_PID)&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>        <span class="sr">/bin/e</span><span class="n">cho</span> <span class="o">-</span><span class="n">n</span> <span class="s1">&#39;.&#39;</span>
</span><span class='line'>        <span class="nb">sleep</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">done</span>
</span><span class='line'><span class="n">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="o">-</span><span class="n">e</span> <span class="vg">$CUR_PID_FILE</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="no">CUR_PID</span><span class="o">=</span><span class="err">$</span><span class="p">(</span><span class="n">cat</span> <span class="vg">$CUR_PID_FILE</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> <span class="o">-</span><span class="n">n</span> <span class="s2">&quot;$(is_unicorn_alive $CUR_PID)&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>        <span class="n">echo</span> <span class="s2">&quot;Unicorn master already running. PID: $CUR_PID&quot;</span>
</span><span class='line'>        <span class="no">RUNNING</span><span class="o">=</span><span class="kp">true</span>
</span><span class='line'>    <span class="n">fi</span>
</span><span class='line'><span class="n">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="o">!</span> <span class="vg">$RUNNING</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
</span><span class='line'>    <span class="n">echo</span> <span class="s2">&quot;Starting unicorn&quot;</span>
</span><span class='line'>    <span class="n">cd</span> <span class="sr">/var/</span><span class="n">www</span><span class="o">/</span><span class="n">responsa</span><span class="o">/</span><span class="n">current</span>
</span><span class='line'>    <span class="n">export</span> <span class="no">PATH</span><span class="o">=</span><span class="s2">&quot;/usr/local/rbenv/shims:/usr/local/rbenv/bin:$PATH&quot;</span>
</span><span class='line'>    <span class="c1"># You need to daemonize the unicorn process, http://unicorn.bogomips.org/unicorn_rails_1.html</span>
</span><span class='line'>    <span class="n">bundle</span> <span class="nb">exec</span> <span class="o">&lt;</span><span class="sx">%= unicorn_command %&gt; -c config/unicorn.rb -E &lt;%=</span> <span class="vi">@options</span><span class="o">[</span><span class="ss">:environment</span><span class="o">]</span> <span class="o">||</span> <span class="s1">&#39;staging&#39;</span> <span class="o">%&gt;</span> <span class="o">-</span><span class="n">D</span>
</span><span class='line'>    <span class="nb">sleep</span> <span class="mi">3</span>
</span><span class='line'>    <span class="no">CUR_PID</span><span class="o">=</span><span class="err">$</span><span class="p">(</span><span class="n">cat</span> <span class="vg">$CUR_PID_FILE</span><span class="p">)</span>
</span><span class='line'><span class="n">fi</span>
</span><span class='line'>
</span><span class='line'><span class="n">function</span> <span class="n">restart</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">echo</span> <span class="s2">&quot;Initialize new master with USR2&quot;</span>
</span><span class='line'>    <span class="n">kill</span> <span class="o">-</span><span class="no">USR2</span> <span class="vg">$CUR_PID</span>
</span><span class='line'>    <span class="c1"># Make runit restart to pick up new unicorn pid</span>
</span><span class='line'>    <span class="nb">sleep</span> <span class="mi">2</span>
</span><span class='line'>    <span class="n">echo</span> <span class="s2">&quot;Restarting service to capture new pid&quot;</span>
</span><span class='line'>    <span class="nb">exit</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">function</span> <span class="n">graceful_shutdown</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">echo</span> <span class="s2">&quot;Initializing graceful shutdown&quot;</span>
</span><span class='line'>    <span class="n">kill</span> <span class="o">-</span><span class="no">QUIT</span> <span class="vg">$CUR_PID</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">function</span> <span class="n">unicorn_interrupted</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">echo</span> <span class="s2">&quot;Unicorn process interrupted. Possibly a runit thing?&quot;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">trap</span> <span class="n">restart</span> <span class="no">HUP</span> <span class="no">QUIT</span> <span class="no">USR2</span> <span class="no">INT</span>
</span><span class='line'><span class="nb">trap</span> <span class="n">graceful_shutdown</span> <span class="no">TERM</span> <span class="no">KILL</span>
</span><span class='line'><span class="nb">trap</span> <span class="n">unicorn_interrupted</span> <span class="no">ALRM</span>
</span><span class='line'>
</span><span class='line'><span class="n">echo</span> <span class="s2">&quot;Waiting for current master to die. PID: ($CUR_PID)&quot;</span>
</span><span class='line'><span class="k">while</span> <span class="o">[</span> <span class="o">-</span><span class="n">n</span> <span class="s2">&quot;$(is_unicorn_alive $CUR_PID)&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>    <span class="sr">/bin/e</span><span class="n">cho</span> <span class="o">-</span><span class="n">n</span> <span class="s1">&#39;.&#39;</span>
</span><span class='line'>    <span class="nb">sleep</span> <span class="mi">2</span>
</span><span class='line'><span class="n">done</span>
</span><span class='line'><span class="n">echo</span> <span class="s2">&quot;You&#39;ve killed a unicorn!&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nginx is used as a reverse proxy:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># chef/site-cookbooks/main/templates/default/nginx.erb</span>
</span><span class='line'>
</span><span class='line'><span class="n">upstream</span> <span class="n">unicorn</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">server</span> <span class="ss">unix</span><span class="p">:</span><span class="sr">/var/</span><span class="n">www</span><span class="o">/</span><span class="n">responsa</span><span class="o">/</span><span class="n">tmp</span><span class="o">/</span><span class="n">sockets</span><span class="o">/</span><span class="n">responsa</span><span class="o">.</span><span class="n">sock</span> <span class="n">fail_timeout</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">server</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">listen</span> <span class="mi">80</span><span class="p">;</span>
</span><span class='line'>  <span class="n">listen</span> <span class="mi">443</span> <span class="n">default</span> <span class="n">ssl</span><span class="p">;</span>
</span><span class='line'>  <span class="n">server_name</span> <span class="o">&lt;</span><span class="sx">%= node[:server_name] %&gt;;</span>
</span><span class='line'><span class="sx">  root /var/www/responsa/current/public;</span>
</span><span class='line'><span class="sx">  # set far-future expiration headers on static content</span>
</span><span class='line'><span class="sx">  expires max;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">  server_tokens off;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">  # ssl                  on;</span>
</span><span class='line'><span class="sx">  ssl_certificate      &lt;%=</span> <span class="s2">&quot;/var/www/responsa/certificate/</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="ss">:environment</span><span class="o">]</span><span class="si">}</span><span class="s2">.crt&quot;</span> <span class="sx">%&gt;;</span>
</span><span class='line'><span class="sx">  ssl_certificate_key  &lt;%= &quot;/var/www/responsa/certificate/</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="ss">:environment</span><span class="o">]</span><span class="si">}</span><span class="sx">.key&quot; %&gt;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ssl_session_timeout</span>  <span class="mi">5</span><span class="n">m</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">ssl_protocols</span>  <span class="no">SSLv2</span> <span class="no">SSLv3</span> <span class="no">TLSv1</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ssl_ciphers</span>  <span class="ss">HIGH</span><span class="p">:</span><span class="o">!</span><span class="ss">aNULL</span><span class="p">:</span><span class="o">!</span><span class="no">MD5</span><span class="p">;</span>
</span><span class='line'>  <span class="n">ssl_prefer_server_ciphers</span>   <span class="n">on</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># set up the rails servers as a virtual location for use later</span>
</span><span class='line'>  <span class="n">location</span> <span class="vi">@unicorn</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">proxy_set_header</span> <span class="no">Host</span> <span class="vg">$host</span><span class="p">;</span>
</span><span class='line'>    <span class="n">proxy_set_header</span> <span class="n">X</span><span class="o">-</span><span class="no">Real</span><span class="o">-</span><span class="no">IP</span>  <span class="vg">$remote_addr</span><span class="p">;</span>
</span><span class='line'>    <span class="n">proxy_set_header</span> <span class="n">X</span><span class="o">-</span><span class="no">Forwarded</span><span class="o">-</span><span class="no">For</span> <span class="vg">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span><span class='line'>    <span class="n">proxy_set_header</span> <span class="n">X</span><span class="o">-</span><span class="no">Forwarded</span><span class="o">-</span><span class="no">Proto</span> <span class="vg">$scheme</span><span class="p">;</span>
</span><span class='line'>    <span class="n">proxy_intercept_errors</span> <span class="n">on</span><span class="p">;</span>
</span><span class='line'>    <span class="n">proxy_redirect</span> <span class="n">off</span><span class="p">;</span>
</span><span class='line'>    <span class="n">proxy_pass</span> <span class="ss">http</span><span class="p">:</span><span class="sr">//uni</span><span class="n">corn</span><span class="p">;</span>
</span><span class='line'>    <span class="n">expires</span> <span class="n">off</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">location</span> <span class="o">/</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">try_files</span> <span class="vg">$uri</span> <span class="vi">@unicorn</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># error_page 500 502 503 504 /500.html;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here&rsquo;s the unicorn configuration file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config/unicorn.rb</span>
</span><span class='line'>
</span><span class='line'><span class="n">rails_env</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;RAILS_ENV&#39;</span><span class="o">]</span> <span class="o">||</span> <span class="s1">&#39;production&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">worker_processes</span> <span class="p">(</span><span class="n">rails_env</span> <span class="o">==</span> <span class="s1">&#39;production&#39;</span> <span class="p">?</span> <span class="mi">6</span> <span class="p">:</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">preload_app</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Restart any workers that haven&#39;t responded in 30 seconds</span>
</span><span class='line'><span class="n">timeout</span> <span class="mi">30</span>
</span><span class='line'>
</span><span class='line'><span class="n">working_directory</span> <span class="s1">&#39;/var/www/responsa/current&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Listen on a Unix data socket</span>
</span><span class='line'><span class="n">pid</span> <span class="s1">&#39;/var/www/responsa/shared/pids/unicorn.pid&#39;</span>
</span><span class='line'><span class="n">listen</span> <span class="s2">&quot;/var/www/responsa/tmp/sockets/responsa.sock&quot;</span><span class="p">,</span> <span class="ss">:backlog</span> <span class="o">=&gt;</span> <span class="mi">2048</span>
</span><span class='line'>
</span><span class='line'><span class="n">stderr_path</span> <span class="s1">&#39;/var/www/responsa/shared/log/unicorn.log&#39;</span>
</span><span class='line'><span class="n">stdout_path</span> <span class="s1">&#39;/var/www/responsa/shared/log/unicorn.log&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">before_exec</span> <span class="k">do</span> <span class="o">|</span><span class="n">server</span><span class="o">|</span>
</span><span class='line'>  <span class="no">ENV</span><span class="o">[</span><span class="s2">&quot;BUNDLE_GEMFILE&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;/var/www/responsa/current/Gemfile&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">before_fork</span> <span class="k">do</span> <span class="o">|</span><span class="n">server</span><span class="p">,</span> <span class="n">worker</span><span class="o">|</span>
</span><span class='line'>  <span class="c1">##</span>
</span><span class='line'>  <span class="c1"># When sent a USR2, Unicorn will suffix its pidfile with .oldbin and</span>
</span><span class='line'>  <span class="c1"># immediately start loading up a new version of itself (loaded with a new</span>
</span><span class='line'>  <span class="c1"># version of our app). When this new Unicorn is completely loaded</span>
</span><span class='line'>  <span class="c1"># it will begin spawning workers. The first worker spawned will check to</span>
</span><span class='line'>  <span class="c1"># see if an .oldbin pidfile exists. If so, this means we&#39;ve just booted up</span>
</span><span class='line'>  <span class="c1"># a new Unicorn and need to tell the old one that it can now die. To do so</span>
</span><span class='line'>  <span class="c1"># we send it a QUIT.</span>
</span><span class='line'>  <span class="c1">#</span>
</span><span class='line'>  <span class="c1"># Using this method we get 0 downtime deploys.</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">old_pid</span> <span class="o">=</span> <span class="s1">&#39;/var/www/responsa/shared/pids/unicorn.pid.oldbin&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">old_pid</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">server</span><span class="o">.</span><span class="n">pid</span> <span class="o">!=</span> <span class="n">old_pid</span>
</span><span class='line'>    <span class="k">begin</span>
</span><span class='line'>      <span class="no">Process</span><span class="o">.</span><span class="n">kill</span><span class="p">(</span><span class="s2">&quot;QUIT&quot;</span><span class="p">,</span> <span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">old_pid</span><span class="p">)</span><span class="o">.</span><span class="n">to_i</span><span class="p">)</span>
</span><span class='line'>    <span class="k">rescue</span> <span class="ss">Errno</span><span class="p">:</span><span class="ss">:ENOENT</span><span class="p">,</span> <span class="ss">Errno</span><span class="p">:</span><span class="ss">:ESRCH</span>
</span><span class='line'>      <span class="c1"># someone else did our job for us</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Capistrano</h2>

<p>After setting up the machine I created a snapshot on Digital Ocean, in case I had to restart from scratch.</p>

<p>Time to deploy! Capistrano was an easy choice.</p>

<p>Using Capistrano multistage I set up the production script</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config/deploy/production.rb</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:server_ip</span><span class="p">,</span> <span class="vg">$MY_IP</span>
</span><span class='line'><span class="n">server</span> <span class="n">server_ip</span><span class="p">,</span> <span class="ss">:app</span><span class="p">,</span> <span class="ss">:web</span><span class="p">,</span> <span class="ss">:primary</span> <span class="o">=&gt;</span> <span class="kp">true</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:rails_env</span><span class="p">,</span> <span class="s1">&#39;production&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:branch</span><span class="p">,</span> <span class="s1">&#39;master&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is used in combo with the deploy script:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config/deploy.rb</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;bundler/capistrano&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;sidekiq/capistrano&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/ext/multistage&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:stages</span><span class="p">,</span> <span class="sx">%w(production staging)</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:default_stage</span><span class="p">,</span> <span class="s1">&#39;staging&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">default_run_options</span><span class="o">[</span><span class="ss">:pty</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'><span class="n">ssh_options</span><span class="o">[</span><span class="ss">:forward_agent</span><span class="o">]</span> <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s1">&#39;responsa&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repository</span><span class="p">,</span>  <span class="vg">$PATH_TO_GITHUB_REPO</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s2">&quot;/var/www/</span><span class="si">#{</span><span class="n">application</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:branch</span><span class="p">,</span> <span class="s1">&#39;development&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:scm</span><span class="p">,</span> <span class="ss">:git</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:scm_verbose</span><span class="p">,</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_via</span><span class="p">,</span> <span class="ss">:remote_cache</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:use_sudo</span><span class="p">,</span> <span class="kp">true</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:keep_releases</span><span class="p">,</span> <span class="mi">3</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:user</span><span class="p">,</span> <span class="s1">&#39;deployer&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:bundle_without</span><span class="p">,</span> <span class="o">[</span><span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span><span class="p">,</span> <span class="ss">:acceptance</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:rake</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">rake</span><span class="si">}</span><span class="s2"> --trace&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:default_environment</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="s1">&#39;PATH&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;/usr/local/rbenv/shims:/usr/local/rbenv/bin:$PATH&#39;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">after</span> <span class="s1">&#39;deploy:update_code&#39;</span><span class="p">,</span> <span class="ss">:upload_env_vars</span>
</span><span class='line'>
</span><span class='line'><span class="n">after</span> <span class="s1">&#39;deploy:setup&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">sudo</span> <span class="s2">&quot;chown -R </span><span class="si">#{</span><span class="n">user</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="s2"> &amp;&amp; chmod -R g+s </span><span class="si">#{</span><span class="n">deploy_to</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">desc</span> <span class="o">&lt;&lt;-</span><span class="no">DESC</span>
</span><span class='line'><span class="sh">  Send a USR2 to the unicorn process to restart for zero downtime deploys.</span>
</span><span class='line'><span class="sh">  runit expects 2 to tell it to send the USR2 signal to the process.</span>
</span><span class='line'><span class="no">  DESC</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:restart</span><span class="p">,</span> <span class="ss">:roles</span> <span class="o">=&gt;</span> <span class="ss">:app</span><span class="p">,</span> <span class="ss">:except</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:no_release</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">}</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">run</span> <span class="s2">&quot;sv 2 /home/</span><span class="si">#{</span><span class="n">user</span><span class="si">}</span><span class="s2">/service/</span><span class="si">#{</span><span class="n">application</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">task</span> <span class="ss">:upload_env_vars</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">upload</span><span class="p">(</span><span class="s2">&quot;.env.</span><span class="si">#{</span><span class="n">rails_env</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">release_path</span><span class="si">}</span><span class="s2">/.env.</span><span class="si">#{</span><span class="n">rails_env</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="ss">:via</span> <span class="o">=&gt;</span> <span class="ss">:scp</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now with two simple commands I can deploy with 0 downtime!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cap</span> <span class="ss">deploy</span><span class="p">:</span><span class="n">setup</span>
</span><span class='line'><span class="n">cap</span> <span class="n">deploy</span>
</span></code></pre></td></tr></table></div></figure>


<p>I must thank czarneckid for sharing <a href="https://gist.github.com/czarneckid/4639793">his setup on Github</a> from which I stole some useful portions and also <a href="https://twitter.com/bugant">@bugant</a> for his patience.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactor: Replace Method With Method Object]]></title>
    <link href="http://matteodepalo.github.io/blog/2013/02/01/refactor-replace-method-with-method-object/"/>
    <updated>2013-02-01T11:40:00+01:00</updated>
    <id>http://matteodepalo.github.io/blog/2013/02/01/refactor-replace-method-with-method-object</id>
    <content type="html"><![CDATA[<p>In my previous <a href="http://matteodepalo.github.com/blog/2013/01/31/how-to-create-custom-stylesheets-dynamically-with-rails-and-sass/">post</a> I described how to implement a feature that allows our customers to create custom stylesheets for their widget.
Altough it worked just fine, the <code>compile</code> class method of the <code>CustomTheme</code> class was blatantly big, so I decided to refactor it.</p>

<p>The biggest issue I faced was that since this was a class method, in order to split it I should have created many little class methods and pass around the theme instance; a solution that didn&rsquo;t satisfy me. The reason <code>compile</code> needed to stay a class method is that I don&rsquo;t want to serialize the whole <code>CustomTheme</code> object and pass it to Sidekiq. Having considered this premises I could proceed in two ways:</p>

<ul>
<li>Delegate the class method <code>compile</code> to an instance method of a new custom theme, something along the lines of:</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">compile</span><span class="p">(</span><span class="n">theme_id</span><span class="p">)</span>
</span><span class='line'> <span class="err"> </span><span class="no">CustomTheme</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">theme_id</span><span class="p">)</span><span class="o">.</span><span class="n">compile</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kp">private</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">compile</span>
</span><span class='line'>  <span class="c1"># perform the actual compilation</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Create a class with the name of the method and extract everything there (thanks <a href="https://twitter.com/bugant">@bugant</a> for reminding me of this refactor)</li>
</ul>


<p>I decided to go with the latter so I followed these steps:</p>

<ol>
<li>Create the class ThemeCompiler</li>
<li>Give the new class an attribute for the object that hosted the original method (theme) and an attribute for each temporary variable in the method</li>
<li>Give the new class a method &ldquo;compute&rdquo;</li>
<li>Copy the body of the original method into compute</li>
<li>Split the compute method in smaller methods</li>
</ol>


<h2>Final considerations</h2>

<p>The first approach has the advantage of keeping everything in one class and use encapsulation properly, however it forces you to keep temp variables at the top of the compile method and increases the length of the class.</p>

<p>The second one puts every temp variables in the constructor but has the disadvantage of being envious of the <code>CustomTheme</code> class data to the point that it forces the promotion of one CustomTheme private method to public. Something like <a href="http://en.wikipedia.org/wiki/Friend_class">friend classes</a> would have helped in this refactor.</p>

<p>The final result, indipendent of the methodology, is that the compile method is now much clearer.</p>

<h2>The code</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># custom_theme.rb</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">compile</span><span class="p">(</span><span class="n">theme_id</span><span class="p">)</span>
</span><span class='line'>  <span class="no">ThemeCompiler</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">theme_id</span><span class="p">)</span><span class="o">.</span><span class="n">compute</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># theme_compiler.rb</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ThemeCompiler</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:theme</span><span class="p">,</span> <span class="ss">:body</span><span class="p">,</span> <span class="ss">:tmp_themes_path</span><span class="p">,</span> <span class="ss">:tmp_asset_name</span><span class="p">,</span> <span class="ss">:widget</span><span class="p">,</span> <span class="ss">:compressed_body</span><span class="p">,</span> <span class="ss">:asset</span><span class="p">,</span> <span class="ss">:env</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">theme_id</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@theme</span> <span class="o">=</span> <span class="no">CustomTheme</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">theme_id</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@body</span> <span class="o">=</span> <span class="no">ERB</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="p">,</span> <span class="s1">&#39;app&#39;</span><span class="p">,</span> <span class="s1">&#39;assets&#39;</span><span class="p">,</span> <span class="s1">&#39;stylesheets&#39;</span><span class="p">,</span> <span class="s1">&#39;widget_custom.scss.erb&#39;</span><span class="p">)))</span><span class="o">.</span><span class="n">result</span><span class="p">(</span><span class="n">theme</span><span class="o">.</span><span class="n">get_binding</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@tmp_themes_path</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="p">,</span> <span class="s1">&#39;tmp&#39;</span><span class="p">,</span> <span class="s1">&#39;themes&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@tmp_asset_name</span> <span class="o">=</span> <span class="n">theme</span><span class="o">.</span><span class="n">widget_id</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>    <span class="vi">@widget</span> <span class="o">=</span> <span class="n">theme</span><span class="o">.</span><span class="n">widget</span>
</span><span class='line'>    <span class="vi">@env</span> <span class="o">=</span> <span class="k">if</span> <span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="ss">Sprockets</span><span class="p">:</span><span class="ss">:Index</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">instance_variable_get</span><span class="p">(</span><span class="s1">&#39;@environment&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">assets</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">compute</span>
</span><span class='line'>    <span class="n">create_temporary_file</span>
</span><span class='line'>    <span class="n">compile</span>
</span><span class='line'>    <span class="n">compress</span>
</span><span class='line'>    <span class="n">upload</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">compile</span>
</span><span class='line'>    <span class="vi">@asset</span> <span class="o">=</span> <span class="n">env</span><span class="o">.</span><span class="n">find_asset</span><span class="p">(</span><span class="n">tmp_asset_name</span><span class="p">)</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="ss">Sass</span><span class="p">:</span><span class="ss">:SyntaxError</span> <span class="o">=&gt;</span> <span class="n">error</span>
</span><span class='line'>    <span class="n">widget</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">notifications</span><span class="o">.</span><span class="n">create</span><span class="p">(</span><span class="ss">:message</span> <span class="o">=&gt;</span> <span class="n">error</span><span class="o">.</span><span class="n">message</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/ \(.+\)$/</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">),</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s1">&#39;error&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">theme</span><span class="o">.</span><span class="n">revert</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">compress</span>
</span><span class='line'>    <span class="vi">@compressed_body</span> <span class="o">=</span> <span class="o">::</span><span class="ss">Sass</span><span class="p">:</span><span class="ss">:Engine</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">asset</span><span class="o">.</span><span class="n">body</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">:syntax</span> <span class="o">=&gt;</span> <span class="ss">:scss</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:cache</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:read_cache</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:style</span> <span class="o">=&gt;</span> <span class="ss">:compressed</span>
</span><span class='line'>    <span class="p">})</span><span class="o">.</span><span class="n">render</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create_temporary_file</span>
</span><span class='line'>    <span class="no">FileUtils</span><span class="o">.</span><span class="n">mkdir_p</span><span class="p">(</span><span class="n">tmp_themes_path</span><span class="p">)</span> <span class="k">unless</span> <span class="no">File</span><span class="o">.</span><span class="n">directory?</span><span class="p">(</span><span class="n">tmp_themes_path</span><span class="p">)</span>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">tmp_themes_path</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">tmp_asset_name</span><span class="si">}</span><span class="s2">.scss&quot;</span><span class="p">),</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">body</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">upload</span>
</span><span class='line'>    <span class="n">theme</span><span class="o">.</span><span class="n">delete_asset</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">production?</span>
</span><span class='line'>      <span class="no">FOG_STORAGE</span><span class="o">.</span><span class="n">directories</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;FOG_DIRECTORY&#39;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>        <span class="ss">:key</span>    <span class="o">=&gt;</span> <span class="n">theme</span><span class="o">.</span><span class="n">asset_path</span><span class="p">(</span><span class="n">asset</span><span class="o">.</span><span class="n">digest</span><span class="p">),</span>
</span><span class='line'>        <span class="ss">:body</span>   <span class="o">=&gt;</span> <span class="no">StringIO</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">compressed_body</span><span class="p">),</span>
</span><span class='line'>        <span class="ss">:public</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:content_type</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/css&#39;</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="p">,</span> <span class="s1">&#39;public&#39;</span><span class="p">,</span> <span class="n">theme</span><span class="o">.</span><span class="n">asset_path</span><span class="p">(</span><span class="n">asset</span><span class="o">.</span><span class="n">digest</span><span class="p">)),</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">compressed_body</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">theme</span><span class="o">.</span><span class="n">update_attribute</span><span class="p">(</span><span class="ss">:digest</span><span class="p">,</span> <span class="n">asset</span><span class="o">.</span><span class="n">digest</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Create Custom Stylesheets Dynamically With Rails and Sass]]></title>
    <link href="http://matteodepalo.github.io/blog/2013/01/31/how-to-create-custom-stylesheets-dynamically-with-rails-and-sass/"/>
    <updated>2013-01-31T12:24:00+01:00</updated>
    <id>http://matteodepalo.github.io/blog/2013/01/31/how-to-create-custom-stylesheets-dynamically-with-rails-and-sass</id>
    <content type="html"><![CDATA[<p>At <a href="http://goresponsa.com">Responsa</a> we have the need to create custom stylesheets for our widget administrators. In order to accomplish this we leverage the power of Sass and the Rails asset pipeline.</p>

<p>In this blog post I&rsquo;ll show you how we implemented this feature and how to deploy it to an Heroku + Amazon S3 production environment.</p>

<h2>Tools</h2>

<p>Let&rsquo;s take a loot at our toolbelt:</p>

<ul>
<li>Sass and Sprockets to dynamically compile the asset</li>
<li>Sidekiq to delay the compilation and upload to S3, which in our case takes between 10 and 15 seconds</li>
<li>Fog gem to store on S3</li>
</ul>


<h2>Models</h2>

<p>We have 2 models: Widget and CustomTheme</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CustomTheme</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Mongoid</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:widget</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:main_color</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">,</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="s2">&quot;#2ba6cb&quot;</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:text_font</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="nb">String</span><span class="p">,</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="s2">&quot;</span><span class="se">\&quot;</span><span class="s2">Helvetica Neue</span><span class="se">\&quot;</span><span class="s2">, </span><span class="se">\&quot;</span><span class="s2">Helvetica</span><span class="se">\&quot;</span><span class="s2">, Helvetica, Arial, sans-serif&quot;</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:digest</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="nb">String</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Widget</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">Mongoid</span><span class="p">:</span><span class="ss">:Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">has_one</span> <span class="ss">:custom_theme</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The custom theme model has the fields used in a widget_custom.scss stylesheet built with the <a href="http://foundation.zurb.com">Foundation</a> CSS framework:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="err">$</span><span class="nt">mainColor</span><span class="o">:</span> <span class="o">&lt;%=</span> <span class="nt">main_color</span> <span class="o">%&gt;;</span>
</span><span class='line'><span class="err">$</span><span class="nt">bodyFontFamily</span><span class="o">:</span> <span class="o">&lt;%=</span> <span class="nt">text_font</span> <span class="o">%&gt;;</span>
</span><span class='line'>
</span><span class='line'><span class="k">@import</span> <span class="s2">&quot;widget/index&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Compilation</h2>

<p>CustomTheme has a method we call every time we need to compile a fresh asset which occurs when the fields change. It performs a few actions in order:</p>

<ol>
<li>Write a temporary and not compiled scss file with the variables taken from the custom theme and give it a unique name.</li>
<li>Use the Sprockets environment to find this temporary file and compile it.</li>
<li>Compress the compiled css file.</li>
<li>Store it either on amazon S3 or the file system.</li>
<li>Delete the previous asset.</li>
</ol>


<h2>Caveats</h2>

<p>Developing this solution we encountered a few problems mainly due to our production setup and the way Sprockets works:</p>

<ul>
<li>If the compilation fails we need to restore the previous asset. To accomplish this we basically keep track of the previous asset and revert to it if anything goes wrong.</li>
<li>In production we need to avoid using the cached Sprockets environment, else Sprockets will cache the entire file system at the beginning.</li>
<li>It&rsquo;s important to run validations of the custom theme fields in order to avoid css injection.</li>
</ul>


<h2>Code</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># application.rb</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">paths</span> <span class="o">&lt;&lt;</span> <span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;tmp&#39;</span><span class="p">,</span> <span class="s1">&#39;themes&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">COMPILED_FIELDS</span> <span class="o">=</span> <span class="o">[</span><span class="ss">:main_color</span><span class="p">,</span> <span class="ss">:text_font</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">after_save</span> <span class="ss">:compile</span><span class="p">,</span> <span class="ss">:if</span> <span class="o">=&gt;</span> <span class="ss">:compiled_attributes_changed?</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">compile</span><span class="p">(</span><span class="n">theme_id</span><span class="p">)</span>
</span><span class='line'>  <span class="n">theme</span> <span class="o">=</span> <span class="no">CustomTheme</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">theme_id</span><span class="p">)</span>
</span><span class='line'>  <span class="n">body</span> <span class="o">=</span> <span class="no">ERB</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="p">,</span> <span class="s1">&#39;app&#39;</span><span class="p">,</span> <span class="s1">&#39;assets&#39;</span><span class="p">,</span> <span class="s1">&#39;stylesheets&#39;</span><span class="p">,</span> <span class="s1">&#39;widget_custom.scss.erb&#39;</span><span class="p">)))</span><span class="o">.</span><span class="n">result</span><span class="p">(</span><span class="n">theme</span><span class="o">.</span><span class="n">get_binding</span><span class="p">)</span>
</span><span class='line'>  <span class="n">tmp_themes_path</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="p">,</span> <span class="s1">&#39;tmp&#39;</span><span class="p">,</span> <span class="s1">&#39;themes&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">tmp_asset_name</span> <span class="o">=</span> <span class="n">theme</span><span class="o">.</span><span class="n">widget_id</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">FileUtils</span><span class="o">.</span><span class="n">mkdir_p</span><span class="p">(</span><span class="n">tmp_themes_path</span><span class="p">)</span> <span class="k">unless</span> <span class="no">File</span><span class="o">.</span><span class="n">directory?</span><span class="p">(</span><span class="n">tmp_themes_path</span><span class="p">)</span>
</span><span class='line'>  <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">tmp_themes_path</span><span class="p">,</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">tmp_asset_name</span><span class="si">}</span><span class="s2">.scss&quot;</span><span class="p">),</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">body</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">widget</span> <span class="o">=</span> <span class="n">theme</span><span class="o">.</span><span class="n">widget</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="n">env</span> <span class="o">=</span> <span class="k">if</span> <span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="ss">Sprockets</span><span class="p">:</span><span class="ss">:Index</span><span class="p">)</span>
</span><span class='line'>      <span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">assets</span><span class="o">.</span><span class="n">instance_variable_get</span><span class="p">(</span><span class="s1">&#39;@environment&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">assets</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">asset</span> <span class="o">=</span> <span class="n">env</span><span class="o">.</span><span class="n">find_asset</span><span class="p">(</span><span class="n">tmp_asset_name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">compressed_body</span> <span class="o">=</span> <span class="o">::</span><span class="ss">Sass</span><span class="p">:</span><span class="ss">:Engine</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">asset</span><span class="o">.</span><span class="n">body</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">:syntax</span> <span class="o">=&gt;</span> <span class="ss">:scss</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:cache</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:read_cache</span> <span class="o">=&gt;</span> <span class="kp">false</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:style</span> <span class="o">=&gt;</span> <span class="ss">:compressed</span>
</span><span class='line'>    <span class="p">})</span><span class="o">.</span><span class="n">render</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">theme</span><span class="o">.</span><span class="n">delete_asset</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">production?</span>
</span><span class='line'>      <span class="no">FOG_STORAGE</span><span class="o">.</span><span class="n">directories</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;FOG_DIRECTORY&#39;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">create</span><span class="p">(</span>
</span><span class='line'>        <span class="ss">:key</span>    <span class="o">=&gt;</span> <span class="n">theme</span><span class="o">.</span><span class="n">asset_path</span><span class="p">(</span><span class="n">asset</span><span class="o">.</span><span class="n">digest</span><span class="p">),</span>
</span><span class='line'>        <span class="ss">:body</span>   <span class="o">=&gt;</span> <span class="no">StringIO</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">compressed_body</span><span class="p">),</span>
</span><span class='line'>        <span class="ss">:public</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'>        <span class="ss">:content_type</span> <span class="o">=&gt;</span> <span class="s1">&#39;text/css&#39;</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="p">,</span> <span class="s1">&#39;public&#39;</span><span class="p">,</span> <span class="n">theme</span><span class="o">.</span><span class="n">asset_path</span><span class="p">(</span><span class="n">asset</span><span class="o">.</span><span class="n">digest</span><span class="p">)),</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="n">f</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">compressed_body</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">theme</span><span class="o">.</span><span class="n">update_attribute</span><span class="p">(</span><span class="ss">:digest</span><span class="p">,</span> <span class="n">asset</span><span class="o">.</span><span class="n">digest</span><span class="p">)</span>
</span><span class='line'>  <span class="k">rescue</span> <span class="ss">Sass</span><span class="p">:</span><span class="ss">:SyntaxError</span> <span class="o">=&gt;</span> <span class="n">error</span>
</span><span class='line'>    <span class="n">theme</span><span class="o">.</span><span class="n">revert</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">widget</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">revert</span>
</span><span class='line'>  <span class="c1"># Revert to your previous theme and notify the user of the failure</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">get_binding</span>
</span><span class='line'>  <span class="nb">binding</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">delete_asset</span>
</span><span class='line'>  <span class="k">return</span> <span class="k">unless</span> <span class="n">digest?</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="o">.</span><span class="n">production?</span>
</span><span class='line'>    <span class="no">FOG_STORAGE</span><span class="o">.</span><span class="n">directories</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;FOG_DIRECTORY&#39;</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">files</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">asset_path</span><span class="p">)</span><span class="o">.</span><span class="n">try</span><span class="p">(</span><span class="ss">:destroy</span><span class="p">)</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="p">,</span> <span class="s1">&#39;public&#39;</span><span class="p">,</span> <span class="n">asset_path</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">asset_path</span><span class="p">(</span><span class="n">digest</span><span class="p">)</span>
</span><span class='line'>  <span class="s2">&quot;assets/themes/</span><span class="si">#{</span><span class="n">asset_name</span><span class="p">(</span><span class="n">digest</span><span class="p">)</span><span class="si">}</span><span class="s2">.css&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">asset_name</span><span class="p">(</span><span class="n">digest</span> <span class="o">=</span> <span class="nb">self</span><span class="o">.</span><span class="n">digest</span><span class="p">)</span>
</span><span class='line'>   <span class="s2">&quot;</span><span class="si">#{</span><span class="n">widget_id</span><span class="si">}</span><span class="s2">-</span><span class="si">#{</span><span class="n">digest</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">asset_url</span>
</span><span class='line'>  <span class="s2">&quot;</span><span class="si">#{</span><span class="ss">ActionController</span><span class="p">:</span><span class="ss">:Base</span><span class="o">.</span><span class="n">asset_host</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">asset_path</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kp">private</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">compile</span>
</span><span class='line'>  <span class="nb">self</span><span class="o">.</span><span class="n">class</span><span class="o">.</span><span class="n">delay</span><span class="o">.</span><span class="n">compile</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">compiled_attributes_changed?</span>
</span><span class='line'>  <span class="n">changed_attributes</span><span class="o">.</span><span class="n">keys</span><span class="o">.</span><span class="n">map</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:to_sym</span><span class="p">)</span><span class="o">.</span><span class="n">any?</span> <span class="p">{</span> <span class="o">|</span><span class="n">f</span><span class="o">|</span> <span class="no">COMPILED_FIELDS</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="n">f</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally we use the asset url in our template:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;%=</span> <span class="n">stylesheet_link_tag</span> <span class="vi">@custom_theme</span><span class="o">.</span><span class="n">asset_url</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cube Loves Geckoboard]]></title>
    <link href="http://matteodepalo.github.io/blog/2012/07/23/cube-loves-geckoboard/"/>
    <updated>2012-07-23T12:02:00+02:00</updated>
    <id>http://matteodepalo.github.io/blog/2012/07/23/cube-loves-geckoboard</id>
    <content type="html"><![CDATA[<h2>Introduction</h2>

<p>This is a summary of my experiences and a mini-guide regarding the deploying and usage of a Cube server and Geckoboard to track statistics at Responsa.</p>

<p>I&rsquo;ll explain how I deployed Cube to a VPS in the cloud and how I&rsquo;ve integrated it in Responsa. I&rsquo;ll also talk about Geckoboard and how we used it to draw graphs based on metrics extracted from Cube, but first here&rsquo;s a brief description of Cube and Geckoboard.</p>

<h3>Cube</h3>

<p><a href="http://square.github.com/cube/">Cube</a> is a system for collecting timestamped events and deriving metrics. By collecting events rather than metrics, Cube lets you compute aggregate statistics post hoc. It also enables richer analysis, such as quantiles and histograms of arbitrary event sets.</p>

<h3>Geckoboard</h3>

<p><a href="http://www.geckoboard.com">Geckoboard</a> is a service for drawing graphs and statistics and organizing them in widgets that populate dashboards.</p>

<h2>Deploying</h2>

<p>To deploy the Cube server I&rsquo;ve chosen Linode, a service that gives you an empty Ubuntu Server virtual machine in the cloud. After the creation of the machine you can just ssh inside and start installing your server.</p>

<p>To make the deploying process automatic I&rsquo;ve chosen <a href="http://wiki.opscode.com/display/chef/About">chef</a>, and in particular <a href="http://wiki.opscode.com/display/chef/Chef+Solo">chef-solo</a>.</p>

<p>Since chef uses ruby we need to install it first in our machine so just run these commands to get some basic stuff:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>apt-get -y update
</span><span class='line'>apt-get -y install curl git-core python-software-properties
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>curl -L https://raw.github.com/fesplugas/rbenv-installer/master/bin/rbenv-installer | bash
</span><span class='line'>vim ~/.bashrc <span class="c"># add rbenv to the top</span>
</span><span class='line'>. ~/.bashrc
</span><span class='line'>rbenv bootstrap-ubuntu-10-04
</span><span class='line'>rbenv install 1.9.3-p125
</span><span class='line'>rbenv global 1.9.3-p125
</span><span class='line'>gem install bundler --no-ri --no-rdoc
</span><span class='line'>rbenv rehash
</span></code></pre></td></tr></table></div></figure>


<p>Then you can install Cube with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git clone git://github.com/matteodepalo/cube.git
</span><span class='line'><span class="nb">cd </span>cube
</span></code></pre></td></tr></table></div></figure>


<p>Now all you need to do is to download the cookbooks and run chef:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install librarian
</span><span class='line'>librarian-chef install
</span><span class='line'>chef-solo -c solo.rb
</span></code></pre></td></tr></table></div></figure>


<p>And your Cube server should be up and running ready to track events!</p>

<h2>Tracking events</h2>

<p>We use Ruby on Rails as our stack so I&rsquo;ve chosen the <a href="https://github.com/codykrieger/cube-ruby">cube-ruby</a> gem to communicate with the server. With this gem you can talk with the <a href="https://github.com/square/cube/wiki/Collector">Cube collector</a> in order to track events.</p>

<p>For example if we want to track a request we can write:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$cube</span> <span class="o">=</span> <span class="ss">Cube</span><span class="p">:</span><span class="ss">:Client</span><span class="o">.</span><span class="n">new</span> <span class="s1">&#39;your-host.com&#39;</span>
</span><span class='line'><span class="vg">$cube</span><span class="o">.</span><span class="n">send</span> <span class="s2">&quot;request&quot;</span><span class="p">,</span> <span class="ss">:value</span> <span class="o">=&gt;</span> <span class="s1">&#39;somevalue&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Analysis</h2>

<p>To compute metrics I&rsquo;ve created a ruby gem called <a href="https://github.com/matteodepalo/cube-evaluator">cube-evaluator</a>, which talks with the <a href="https://github.com/square/cube/wiki/Collector">Cube evaluator</a>.</p>

<p>Let&rsquo;s say we want the daily requests on our website in this month we can write:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$cube_evaluator</span> <span class="o">=</span> <span class="ss">Cube</span><span class="p">:</span><span class="ss">:Evaluator</span><span class="o">.</span><span class="n">new</span> <span class="s1">&#39;your-host.com&#39;</span>
</span><span class='line'><span class="n">daily_requests</span> <span class="o">=</span> <span class="vg">$cube_evaluator</span><span class="o">.</span><span class="n">metric</span><span class="p">(</span>
</span><span class='line'>                 <span class="ss">:expression</span> <span class="o">=&gt;</span> <span class="s1">&#39;sum(request)&#39;</span><span class="p">,</span>
</span><span class='line'>                 <span class="ss">:start</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="n">month</span><span class="o">.</span><span class="n">ago</span><span class="p">,</span>
</span><span class='line'>                 <span class="ss">:stop</span> <span class="o">=&gt;</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="p">,</span>
</span><span class='line'>                 <span class="ss">:step</span> <span class="o">=&gt;</span> <span class="s1">&#39;1day&#39;</span>
</span><span class='line'>               <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>daily_requests</code> will be an Hash containing the array of times and the array of corresponding values</p>

<h2>Drawing</h2>

<p>Geckoboard needs an endpoint in your server to poll in order to draw the data. To ease the creation of these endpoints I&rsquo;ve improved and used the <a href="https://github.com/matteodepalo/chameleon">chameleon gem</a>. Just add it to your gemfile</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;chameleon&#39;</span><span class="p">,</span> <span class="ss">:git</span> <span class="o">=&gt;</span> <span class="s1">&#39;git://github.com/matteodepalo/chameleon.git&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>then run bundle to install it</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>bundle install
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s draw the daily_requests now. Create a line widget graph</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g chameleon:widget requests line
</span></code></pre></td></tr></table></div></figure>


<p>and use your daily_requests hash to populate it</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Chameleon</span><span class="p">:</span><span class="ss">:Widget</span><span class="o">.</span><span class="n">new</span> <span class="ss">:requests</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">key</span> <span class="s2">&quot;3618c90ec02d5a57061ad7b78afcbb050e50b608&quot;</span>
</span><span class='line'>  <span class="n">type</span> <span class="s2">&quot;line&quot;</span>
</span><span class='line'>  <span class="n">data</span> <span class="k">do</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="ss">:items</span> <span class="o">=&gt;</span> <span class="n">daily_requests</span><span class="o">[</span><span class="ss">:values</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:x_axis</span> <span class="o">=&gt;</span> <span class="n">daily_requests</span><span class="o">[</span><span class="ss">:times</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:y_axis</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="n">daily_requests</span><span class="o">[</span><span class="ss">:times</span><span class="o">].</span><span class="n">min</span><span class="p">,</span> <span class="n">daily_requests</span><span class="o">[</span><span class="ss">:times</span><span class="o">].</span><span class="n">max</span><span class="o">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Congrats! You are now tracking statistics in the coolest way possible ;)</p>
]]></content>
  </entry>
  
</feed>
